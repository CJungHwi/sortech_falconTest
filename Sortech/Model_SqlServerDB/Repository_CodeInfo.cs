// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Sortech.DBConn;
using System.Collections.Generic;

namespace Sortech.Model_SqlServerDB
{
    public class Repository_CodeInfo : IRepository_CodeInfo
    {
        private readonly sortech_SqlServerDB_Context _DB;

        public Repository_CodeInfo(sortech_SqlServerDB_Context DB)
        {
            _DB = DB;
        }

        public async Task<List<CCodeInfo_sql>> SelectAll()
        {
            return await _DB.CodeInfo_sql.OrderBy(i => i.ManageCd).ToListAsync();
        }

        public List<CCodeInfo_sql> SelectAll_SQL()
        {
            string query = @"SELECT A.CorpCD, 
                                    B.codeNM AS CorpNM, 
                                    A.ManageCD, 
                                    C.ManageNM AS ManageNM, 
                                    A.CodeCd, 
                                    A.CodeNm, 
                                    A.Codevar1, 
                                    A.Codevar2, 
                                    A.Codeint1, 
                                    A.Codeint2, 
                                    A.User_yn, 
                                    A.Bigo 
                            FROM dbo.CodeInfo A 
                            LEFT JOIN dbo.CodeInfo B ON B.ManageCD = '1000' AND A.CorpCD = B.CODECD
							LEFT JOIN dbo.GroupCodeInfo C ON A.ManageCD = C.ManageCD
                            ORDER BY ManageCD, CodeCd";

            return _DB.CodeInfo_sql.FromSqlRaw(query).ToList();
        }

        //public async Task<List<CodeInfo>> Select(string corpCD, string manageCD)
        //{
        //    return await _DB.CodeInfo.Where(x => x.CorpCd == corpCD & x.ManageCd == manageCD).OrderBy(i => i.ManageCd).ThenBy(i=>i.CodeCd).ToListAsync();
        //}

        public async void Insert(CCodeInfo_sql CodeInfo)
        {
            try
            {
                await _DB.CodeInfo_sql.AddAsync(CodeInfo);
                _DB.SaveChanges();

            }
            catch (Exception e)
            {

                throw e;
            }
        }

        public void Insert_SQL(CCodeInfo_sql CodeInfo)
        {
            try
            {
                var parameter = new List<SqlParameter>();
                parameter.Add(new SqlParameter("@ManageCd", CodeInfo.ManageCd));
                parameter.Add(new SqlParameter("@CorpCd", CodeInfo.CorpCd));
                parameter.Add(new SqlParameter("@CodeCd", CodeInfo.CodeCd));
                parameter.Add(new SqlParameter("@CodeNm", CodeInfo.CodeNm));
                parameter.Add(new SqlParameter("@Codevar1", CodeInfo.Codevar1 == null ? "" : CodeInfo.Codevar1));
                parameter.Add(new SqlParameter("@Codevar2", CodeInfo.Codevar2 == null ? "" : CodeInfo.Codevar2));
                parameter.Add(new SqlParameter("@Codeint1", CodeInfo.Codeint1 == null ? "" : CodeInfo.Codeint1));
                parameter.Add(new SqlParameter("@Codeint2", CodeInfo.Codeint2 == null ? "" : CodeInfo.Codeint2));
                parameter.Add(new SqlParameter("@User_yn", CodeInfo.User_yn));
                parameter.Add(new SqlParameter("@Bigo", CodeInfo.Bigo == null ? "" : CodeInfo.Bigo));

                _DB.Database.ExecuteSqlRawAsync(
                    @"INSERT INTO [dbo].[CodeInfo]
                       (ManageCd, CorpCD, CodeCd, CodeNm, Codevar1, Codevar2, Codeint1, Codeint2 ,User_yn,Bigo)
                    VALUES
                        (@ManageCd, @CorpCD, @CodeCd, @CodeNm, @Codevar1, @Codevar2, @Codeint1, @Codeint2 ,@User_yn, @Bigo)"
                    , parameter.ToArray());

                _DB.SaveChanges();
            }
            catch (Exception e)
            {

                throw e;
            }
        }

        public void Delete(string corpCD, string manageCD)
        {
            try
            {
                CCodeInfo_sql CodeInfo = _DB.CodeInfo_sql.Find(corpCD, manageCD);
                _DB.CodeInfo_sql.Remove(CodeInfo);
                _DB.SaveChanges();
            }
            catch (Exception e)
            {

                throw e;
            }
        }

        public void Update(string corpCd, string manageCd, CCodeInfo_sql CodeInfo)
        {
            try
            {
                var local = _DB.Set<CCodeInfo>().Local.SingleOrDefault(entry => entry.CorpCd.Equals(corpCd) && entry.ManageCd.Equals(manageCd));
                // check if local is not null
                if (local != null)
                {
                    // detach
                    _DB.Entry(local).State = EntityState.Detached;
                }
                _DB.Entry(CodeInfo).State = EntityState.Modified;
                _DB.SaveChanges();
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        public void Delete_SQL(CCodeInfo_sql CodeInfo)
        {
            try
            {
                var parameter = new List<SqlParameter>();
                parameter.Add(new SqlParameter("@ManageCd", CodeInfo.ManageCd));
                parameter.Add(new SqlParameter("@CorpCd", CodeInfo.CorpCd));
                parameter.Add(new SqlParameter("@CodeCd", CodeInfo.CodeCd));

                _DB.Database.ExecuteSqlRawAsync(
                    @"DELETE [dbo].[CodeInfo]
                     WHERE ManageCd = @ManageCd AND CorpCD = @CorpCD AND CodeCd = @CodeCd "
                    , parameter.ToArray());

                _DB.SaveChanges();
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        public void Update_SQL(CCodeInfo_sql CodeInfo)
        {
            try
            {
                var parameter = new List<SqlParameter>();
                parameter.Add(new SqlParameter("@ManageCd", CodeInfo.ManageCd));
                parameter.Add(new SqlParameter("@CorpCd", CodeInfo.CorpCd));
                parameter.Add(new SqlParameter("@CodeCd", CodeInfo.CodeCd));
                parameter.Add(new SqlParameter("@CodeNm", CodeInfo.CodeNm));
                parameter.Add(new SqlParameter("@Codevar1", CodeInfo.Codevar1 == null ? "" : CodeInfo.Codevar1));
                parameter.Add(new SqlParameter("@Codevar2", CodeInfo.Codevar2 == null ? "" : CodeInfo.Codevar2));
                parameter.Add(new SqlParameter("@Codeint1", CodeInfo.Codeint1 == null ? "" : CodeInfo.Codeint1));
                parameter.Add(new SqlParameter("@Codeint2", CodeInfo.Codeint2 == null ? "" : CodeInfo.Codeint2));
                parameter.Add(new SqlParameter("@User_yn", CodeInfo.User_yn));
                parameter.Add(new SqlParameter("@Bigo", CodeInfo.Bigo == null ? "" : CodeInfo.Bigo));

                _DB.Database.ExecuteSqlRaw(
                    @"UPDATE [dbo].[CodeInfo]
                      SET
                        CodeNm = @CodeNm,
                        Codevar1 = @Codevar1,
                        Codevar2 = @Codevar2,
                        Codeint1 = @Codeint1,
                        Codeint2 = @Codeint2,
                        User_yn = @User_yn,
                        Bigo = @Bigo
                     WHERE ManageCd = @ManageCd AND CorpCD = @CorpCD AND CodeCd = @CodeCd "
                    , parameter.ToArray());

                _DB.SaveChanges();
            }
            catch (Exception e)
            {
                throw e;
            }
        }
    }
}