@page "/comm/Codegroup"
@using Microsoft.Data.SqlClient
@*@using Syncfusion.Blazor
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.QueryBuilder*@
@using Sortech.Model_SqlServerDB
@using Sortech.Common
@using Sortech.DBConn
@using System.Data
@using System.Dynamic
@using static Sortech.Common.CommonList
@inject IRepository_GroupCodeInfo grcodeinfo_service

<h3>기준정보그룹</h3>

@*
    DataSource : 가져온 데이터
    AllowPaging : 페이징 기능 활성화
    PageSize : 페이지 표시 수
    AllowSorting : 소팅 기능 활성화
    AllowFiltering : 필터링 기능 활성화
    AllowGrouping : Grouping 기능 활성화
    ShowColumnChooser : 열을 동적으로 표시/숨김 기능 활성화 ( * Toolbar=@ToolbarItems 와 code 단에 ToolbarItems 값 지정 )
    AllowResizing : 컬럼 리사이즈
    AllowReordering : 열 이동
    ShowColumnMenu : 열 타이틀에 메뉴 표시

    FloatLabelType -> 추가/수정시 대화상자일때 dropdown 의 헤더 타이틀 나오게 하는거.

    https://blazor.syncfusion.com/documentation/datagrid/editing

    https://blazor.syncfusion.com/documentation/datagrid/how-to/cascading-dropdownlist-with-grid-editing

    그리드 이벤트
    https://blazor.syncfusion.com/documentation/datagrid/events

    Blazor DataGrid 구성 요소에서 드롭다운 목록이 있는 사용자 지정 도구 모음 만들기
    https://blazor.syncfusion.com/documentation/datagrid/how-to/tool-bar-with-drop-down-list
    Blazor 데이터 그리드 구성 요소에서 선택한 행 셀의 인덱스 값 가져오기
    https://blazor.syncfusion.com/documentation/datagrid/how-to/rowcell-index
*@

<div class="col-lg-12 control-section">
    <SfQueryBuilder @ref="QueryBuilderObj" TValue="CGroupCodeInfo" DataSource="@groupcodes" AllowValidation="false">
        <QueryBuilderRule Condition="and" Rules="@rules"></QueryBuilderRule>
        <QueryBuilderEvents TValue="CGroupCodeInfo" Created="created" RuleChanged="updateRule"></QueryBuilderEvents>
        <QueryBuilderColumns>
            <QueryBuilderColumn Field="ManageCd" Label="그룹코드" Type="Syncfusion.Blazor.QueryBuilder.ColumnType.String">
            </QueryBuilderColumn>
            <QueryBuilderColumn Field="ManageNm" Label="코드그룹명" Type="Syncfusion.Blazor.QueryBuilder.ColumnType.String"></QueryBuilderColumn>
            <QueryBuilderColumn Field="User_yn" Label="사용여부" Type="Syncfusion.Blazor.QueryBuilder.ColumnType.String"></QueryBuilderColumn>
            <QueryBuilderColumn Field="Bigo" Label="비고" Type="Syncfusion.Blazor.QueryBuilder.ColumnType.String"></QueryBuilderColumn>
        </QueryBuilderColumns>
    </SfQueryBuilder>
    <SfButton CssClass="e-primary" @onclick="setRules">Set 룰</SfButton>
    <SfButton CssClass="e-primary" @onclick="getRules">Get 룰</SfButton>
</div>

<SfGrid DataSource="@groupcodesfielt" AllowPaging="true" AllowSorting="true" AllowFiltering="false" AllowGrouping="false" ShowColumnChooser="true" Toolbar=@ToolbarItems
        AllowResizing="true" AllowReordering="true" ShowColumnMenu="true">
    <GridPageSettings PageSize="20"></GridPageSettings>
    <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Dialog" NewRowPosition="NewRowPosition.Bottom"></GridEditSettings>
    <GridEvents OnActionBegin="ActionBeginHandler_group" OnActionComplete="ActionCompleteHandler_group" TValue="CGroupCodeInfo" Created="created"></GridEvents>
    <GridColumns>
        <GridColumn Field="@nameof(CGroupCodeInfo.ManageCd)" HeaderText="그룹코드" EditType="EditType.DefaultEdit" IsPrimaryKey="true"
                    TextAlign="TextAlign.Center" Width="100" ValidationRules="@(new ValidationRules{Required=true, MinLength=4})">
            <EditTemplate>
                <SfTextBox ID="CustManageCd" HtmlAttributes="@(new Dictionary<string, object>() { { "maxlength", 4 } })" Enabled="@Enabled_GroupManageCd" @bind-Value="@((context as CGroupCodeInfo).ManageCd)"></SfTextBox>
            </EditTemplate>
        </GridColumn>
        <GridColumn Field="@nameof(CGroupCodeInfo.ManageNm)" HeaderText="그룹코드명" TextAlign="TextAlign.Center" Width="120"
                    ValidationRules="@(new ValidationRules{Required=true})"></GridColumn>
        <GridColumn Field="@nameof(CGroupCodeInfo.User_yn)" HeaderText="사용여부" EditType="EditType.DropDownEdit" TextAlign="TextAlign.Center" Width="100">
            <EditTemplate>
                <SfDropDownList ID="GroupUser_yn" Placeholder="사용여부선택" TValue="string" TItem="DwCodeval" FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Always"
                @bind-Value="@((context as CGroupCodeInfo).User_yn)" DefaultValue="@("Y")" DataSource="@_infoSourceList">
                    <DropDownListFieldSettings Text="Name" Value="Code"></DropDownListFieldSettings>
                </SfDropDownList>
            </EditTemplate>
        </GridColumn>
        <GridColumn Field="@nameof(CGroupCodeInfo.Bigo)" HeaderText="비고" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Left" Width="100"></GridColumn>
    </GridColumns>
</SfGrid>

@code {
    // 공통 그리드 툴바
    public string[] ToolbarItems = new string[] { "Add", "Edit", "Delete", "Update", "Cancel", "ColumnChooser" };

    // 그룹데이터 리스트
    public IEnumerable<CGroupCodeInfo>? groupcodes { get; set; } // QueryBuilder 사용
    public IEnumerable<CGroupCodeInfo>? groupcodesfielt { get; set; } // 기준정보그룹 그리드 사용

    //컬럼 항목의 사용여부
    public bool Enabled_GroupManageCd = true; // 그룹코드

    List<DwCodeval> _infoSourceList = new ()
    {
        new DwCodeval { Name = "Y", Code = "Y" },
        new DwCodeval { Name = "N", Code = "N" }
    };

    // Query Builder 관련.
    private string[] sfQuery_User_yn = new string[] { "Y", "N" };

    List<RuleModel> rules = new ()
    {
        new RuleModel {Field="ManageCd", Label="그룹코드", Type="String", Operator="contains", Value=""}
    };

    protected override async Task OnInitializedAsync()
    {
        groupcodes = await grcodeinfo_service.SelectAll();
        //groupcodesfielt = await grcodeinfo_service.SelectAll();
    }

    SfQueryBuilder<CGroupCodeInfo> QueryBuilderObj;

    private void setRules()
    {
        QueryBuilderObj.SetRulesFromSql("ManageCd = '1001' AND User_yn = 'N'");
    }

    private void getRules()
    {
        QueryBuilderObj.GetSqlFromRules(QueryBuilderObj.GetRules());
    }

    private void created()
    {
        groupcodesfielt = QueryBuilderObj.GetFilteredRecords().ToList().AsEnumerable<CGroupCodeInfo>();
    }

    private void updateRule(Syncfusion.Blazor.QueryBuilder.RuleChangeEventArgs args)
    {
        if (QueryBuilderObj.GetValidRules().Rules.Count > 0)
        {
            groupcodesfielt = QueryBuilderObj.GetFilteredRecords().ToList().AsEnumerable<CGroupCodeInfo>();
        }
        else
        {
            groupcodesfielt = groupcodes;
        }
        StateHasChanged();
    }

    //기준정보그룹의 상단 버튼 누르면 발생하는 이벤트
    // 수정/삭제를 정상적으로 하려면 column 속성에 IsPrimaryKey 가 있어야 함.
    public void ActionBeginHandler_group(ActionEventArgs<CGroupCodeInfo> args)
    {
        // 추가 버튼 클릭
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add))
        {
            // 최대값 가져오기.
            DBConnection dbconn = new("sortech_SQLSERVER");

            using (SqlConnection connection = new (dbconn.ConnectionString))
            {
                try
                {
                    connection.Open();
                    string queryString = "SELECT Max(ManageCD) + 1 AS MAXCODE FROM SortechSQL..GroupCodeInfo";

                    SqlCommand comm = new (queryString, connection);

                    args.Data.ManageCd = comm.ExecuteScalar().ToString();

                    Enabled_GroupManageCd = false;
                }
                catch (SqlException se)
                {
                    Console.WriteLine(se.ToString());
                    throw;
                }
                finally
                {
                    connection.Close();
                }
            }

            args.Data.User_yn = "Y";
        }

        // 수정진행 전
        else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeforeBeginEdit))
        {
            //if (args.Data.ManageCd != "") Enabled_GroupManageCd = false;
        }
        // 수정진행
        else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            if (args.Data.ManageCd != "") Enabled_GroupManageCd = false;
        }
        //저장버튼 클릭
        else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Add")
                grcodeinfo_service.Insert(args.Data);
            if (args.Action == "Edit")
                grcodeinfo_service.Update(args.Data.ManageCd, args.Data);
        }
        // 삭제버튼 클릭
        else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
            grcodeinfo_service.Delete(args.Data.ManageCd);
    }

    //기준정보그룹의 ActionBeginHandler_group 실행 후 실행
    public async void ActionCompleteHandler_group(ActionEventArgs<CGroupCodeInfo> args)
    {
        //will be triggered when CRUD action is complete.
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            await Task.Delay(5000);
            groupcodes = await grcodeinfo_service.SelectAll();
        }
    }

}