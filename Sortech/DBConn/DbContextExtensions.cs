// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;

namespace Sortech.DBConn
{
    public static class DbContextExtensions
    {
        //프로젝트에 의존성 서비스를 추가하기 위한 것.
        public static IConfigurationRoot Configuration { get; set; }

        public static IServiceCollection Addsortech_SqlServerDBContext(this IServiceCollection services)
        {
            var builder = new ConfigurationBuilder().SetBasePath(Directory.GetCurrentDirectory()).AddJsonFile("appsettings.json");

            Configuration = builder.Build();

            // sqlserver
            services.AddDbContext<sortech_SqlServerDB_Context>(options => options.UseSqlServer(Configuration.GetConnectionString("sortech_SQLSERVER")), ServiceLifetime.Transient);

            return services;
        }
        public static IServiceCollection Addsortech_MariaDBContext(this IServiceCollection services)
        {
            var builder = new ConfigurationBuilder().SetBasePath(Directory.GetCurrentDirectory()).AddJsonFile("appsettings.json");

            Configuration = builder.Build();

            // mariadb
            services.AddDbContext<sortech_MariaDB_Context>(options => options.UseMySql(Configuration.GetConnectionString("sortech_MARIADB"), Microsoft.EntityFrameworkCore.ServerVersion.Parse("10.10.2-mariadb")), ServiceLifetime.Transient);

            return services;
        }

        public static async Task<List<T>> SqlQueryAsync<T>(this DbContext db, string sql, object[] parameters = null, CancellationToken cancellationToken = default) where T : class
        {
            if (parameters is null)
            {
                parameters = new object[] { };
            }

            if (typeof(T).GetProperties().Any())
            {
                return await db.Set<T>().FromSqlRaw(sql, parameters).ToListAsync(cancellationToken);
            }
            else
            {
                await db.Database.ExecuteSqlRawAsync(sql, parameters, cancellationToken);
                return default;
            }
        }
    }

    public class OutputParameter<TValue>
    {
        private bool _valueSet = false;

        public TValue _value;

        public TValue Value
        {
            get
            {
                if (!_valueSet)
                    throw new InvalidOperationException("Value not set.");

                return _value;
            }
        }

        internal void SetValue(object value)
        {
            _valueSet = true;

            _value = null == value || Convert.IsDBNull(value) ? default(TValue) : (TValue)value;
        }
    }
    
}
