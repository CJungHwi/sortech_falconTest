// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using Sortech.Model_SqlServerDB;

namespace Sortech.DBConn
{
    public partial class sortech_SqlServerDB_Context : DbContext
    {
        public sortech_SqlServerDB_Context()
        {
        }

        public sortech_SqlServerDB_Context(DbContextOptions<sortech_SqlServerDB_Context> options)
            : base(options)
        {
        }

        public virtual DbSet<CCodeInfo> CodeInfo { get; set; }
        public virtual DbSet<CCodeInfo_sql> CodeInfo_sql { get; set; }
        public virtual DbSet<CEmpInfo_proc> EmpInfo_proc { get; set; }
        public virtual DbSet<CGroupCodeInfo> GroupCodeInfo { get; set; }
        public virtual DbSet<CMenuList> MenuList { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CCodeInfo>(entity =>
            {
                entity.HasKey(e => new { e.CorpCd, e.ManageCd, e.CodeCd })
                    .HasName("PK_code");

                entity.Property(e => e.CorpCd)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CorpCD")
                    .HasComment("사업장코드");

                entity.Property(e => e.ManageCd)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("ManageCD")
                    .HasComment("그룹코드");

                entity.Property(e => e.CodeCd)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("codeCD")
                    .HasComment("코드");

                entity.Property(e => e.Bigo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("bigo")
                    .HasComment("비고");

                entity.Property(e => e.CodeNm)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("codeNM")
                    .HasComment("코드명");

                entity.Property(e => e.Codeint1)
                    .HasColumnName("codeint1")
                    .HasComment("숫자1");

                entity.Property(e => e.Codeint2)
                    .HasColumnName("codeint2")
                    .HasComment("숫자2");

                entity.Property(e => e.Codevar1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("codevar1")
                    .HasComment("문자1");

                entity.Property(e => e.Codevar2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("codevar2")
                    .HasComment("문자2");

                entity.Property(e => e.User_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("User_yn")
                    .HasComment("사용여부(Y/N)");
            });

            // query 사용할때 추가
            modelBuilder.Entity<CCodeInfo_sql>().HasNoKey();
            modelBuilder.Entity<CCodeInfo_sql>().ToView(name: "CodeInfo_sql");
            // query 사용할때 추가

            // query 사용할때 추가
            modelBuilder.Entity<CEmpInfo_proc>().HasNoKey();
            modelBuilder.Entity<CEmpInfo_proc>().ToView(name: "EmpInfo_proc");
            // query 사용할때 추가

            modelBuilder.Entity<CEmpInfo_proc>(entity =>
            {
                entity.HasKey(e => e.Empid)
                    .HasName("PK_emp");

                entity.ToTable("empInfo");

                entity.Property(e => e.Empid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("empid")
                    .HasComment("사번");

                entity.Property(e => e.Birthday)
                    .HasColumnType("date")
                    .HasColumnName("birthday")
                    .HasComment("생년월일");

                entity.Property(e => e.Dept)
                    .HasColumnName("dept")
                    .HasComment("부서코드");

                entity.Property(e => e.EmpNm)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("empNm")
                    .HasComment("이름");

                entity.Property(e => e.Grade)
                    .HasColumnName("grade")
                    .HasComment("직급코드");

                entity.Property(e => e.Leave)
                    .HasColumnName("leave")
                    .HasComment("퇴사여부코드");

                entity.Property(e => e.Loginid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("loginid")
                    .HasComment("로그인id");
            });

            modelBuilder.Entity<CGroupCodeInfo>(entity =>
            {
                entity.HasKey(e => new { e.ManageCd })
                    .HasName("PK_code");

                entity.Property(e => e.Bigo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("bigo")
                    .HasComment("비고");

                entity.Property(e => e.ManageCd)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("ManageCD")
                    .HasComment("코드그룹코드");

                entity.Property(e => e.ManageNm)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ManageNM")
                    .HasComment("코드그룹명");

                entity.Property(e => e.User_yn)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("User_yn");
            });

            modelBuilder.Entity<CMenuList>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.IconName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MenuId).ValueGeneratedOnAdd();

                entity.Property(e => e.MenuName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PageName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

        //public async Task<List<T>> ExecSQL<T>(string query)
        //{
        //    using (var command = Database.GetDbConnection().CreateCommand())
        //    {
        //        command.CommandText = query;
        //        command.CommandType = CommandType.Text;
        //        Database.OpenConnection();

        //        List<T> list = new List<T>();

        //        using (var result = command.ExecuteReader())
        //        {
        //            T obj = default(T);
        //            while (result.Read())
        //            {
        //                obj = Activator.CreateInstance<T>();
        //                foreach (PropertyInfo prop in obj.GetType().GetProperties())
        //                {
        //                    if (!object.Equals(result[prop.Name], DBNull.Value))
        //                    {
        //                        prop.SetValue(obj, result[prop.Name], null);
        //                    }
        //                }
        //                list.Add(obj);
        //            }
        //        }
        //        Database.CloseConnection();
        //        return list;
        //    }
        //}
    }
}